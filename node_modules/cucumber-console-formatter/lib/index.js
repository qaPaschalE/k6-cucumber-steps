"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("./fs");
const time_1 = require("./time");
const status_marker_1 = require("./status-marker");
const cucumber_1 = require("@cucumber/cucumber");
const fs_2 = require("fs");
const path_1 = require("path");
const indent = '  ';
class SimpleConsoleFormatter extends cucumber_1.SummaryFormatter {
    constructor(options) {
        super(options);
        this.eventIndex = 0;
        this.instanceCreationDate = new Date();
        this.printEnvelopes = process.env['SimpleConsoleFormatter.printEnvelopes'] === 'true';
        this.targetSubFolderForPrintedEnvelopes = process.env['SimpleConsoleFormatter.targetFolderForPrintedEnvelopes'] ||
            'debug-console-formatter';
        this.hasDisplayedFeatureNameAndDescription = false;
        options.eventBroadcaster.on('envelope', (envelope) => {
            this.printEnvelope(envelope);
            this.formatEnvelope(envelope);
        });
    }
    printEnvelope(envelope) {
        if (!this.printEnvelopes) {
            return;
        }
        const targetFolder = path_1.join(process.cwd(), this.targetSubFolderForPrintedEnvelopes, time_1.dateToFilename(this.instanceCreationDate));
        if (this.eventIndex === 0) {
            fs_1.ensureDirectoryExists(path_1.join(process.cwd(), this.targetSubFolderForPrintedEnvelopes));
            fs_1.ensureDirectoryExists(targetFolder);
        }
        this.eventIndex += 1;
        const targetFilename = `${this.eventIndex}-envelope.json`;
        const filepath = path_1.join(targetFolder, targetFilename);
        fs_2.writeFileSync(filepath, JSON.stringify(envelope, null, 2));
    }
    formatEnvelope(envelope) {
        if (envelope.meta) {
            return this.formatMeta(envelope.meta);
        }
        if (envelope.testRunStarted) {
            return this.formatTestRunStarted(envelope.testRunStarted);
        }
        if (envelope.testRunFinished) {
            return this.formatTestRunFinished(envelope.testRunFinished);
        }
        if (envelope.testCaseStarted) {
            return this.formatTestCaseStarted(envelope.testCaseStarted);
        }
        if (envelope.testStepFinished) {
            return this.formatTestStepFinished(envelope.testStepFinished);
        }
    }
    getGherkinStepFrom(testRunInfo) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const status = (_b = (_a = testRunInfo.testStepResult) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : cucumber_1.Status.UNKNOWN;
        const errorMessage = (_c = testRunInfo.testStepResult) === null || _c === void 0 ? void 0 : _c.message;
        const { testCaseStartedId, testStepId } = testRunInfo;
        if (!testCaseStartedId || !testStepId) {
            return null;
        }
        if (!testRunInfo.testStepId) {
            return null;
        }
        const { testCase } = this.eventDataCollector.getTestCaseAttempt(testCaseStartedId);
        const testStep = (_d = testCase.testSteps) === null || _d === void 0 ? void 0 : _d.find((step) => step.id === testStepId);
        if (!(testStep === null || testStep === void 0 ? void 0 : testStep.pickleStepId)) {
            return null;
        }
        if (!testCase.pickleId) {
            return null;
        }
        const pickle = this.eventDataCollector.getPickle(testCase.pickleId);
        if (!(pickle === null || pickle === void 0 ? void 0 : pickle.uri)) {
            return null;
        }
        const pickleStep = (_e = pickle.steps) === null || _e === void 0 ? void 0 : _e.find((step) => step.id === testStep.pickleStepId);
        if (!pickleStep) {
            return null;
        }
        const { astNodeIds, text } = pickleStep;
        if (!text || !astNodeIds) {
            return null;
        }
        const astNodeId = astNodeIds[0];
        const gherkinDocument = this.eventDataCollector.getGherkinDocument(pickle.uri);
        if (!((_f = gherkinDocument === null || gherkinDocument === void 0 ? void 0 : gherkinDocument.feature) === null || _f === void 0 ? void 0 : _f.children)) {
            return null;
        }
        const gherkinStep = gherkinDocument.feature.children
            .flatMap((child) => {
            var _a, _b, _c, _d, _e;
            if (child.background) {
                const lastIndex = (((_a = child.background.steps) === null || _a === void 0 ? void 0 : _a.length) || 0) - 1;
                return (_c = (_b = child.background) === null || _b === void 0 ? void 0 : _b.steps) === null || _c === void 0 ? void 0 : _c.map((step, index) => {
                    var _a, _b;
                    return ({
                        ...step,
                        index,
                        isLastIndex: index === lastIndex,
                        background: {
                            keyword: (_a = child.background) === null || _a === void 0 ? void 0 : _a.keyword,
                            name: (_b = child.background) === null || _b === void 0 ? void 0 : _b.name,
                        },
                    });
                });
            }
            if (child.scenario) {
                const lastIndex = (((_d = child.scenario.steps) === null || _d === void 0 ? void 0 : _d.length) || 0) - 1;
                return (_e = child.scenario.steps) === null || _e === void 0 ? void 0 : _e.map((step, index) => {
                    var _a, _b;
                    return ({
                        ...step,
                        index,
                        isLastIndex: index === lastIndex,
                        scenario: {
                            keyword: (_a = child.scenario) === null || _a === void 0 ? void 0 : _a.keyword,
                            name: (_b = child.scenario) === null || _b === void 0 ? void 0 : _b.name,
                        },
                    });
                });
            }
            return [];
        })
            .find((step) => (step === null || step === void 0 ? void 0 : step.id) === astNodeId);
        const keyword = ((_g = gherkinStep === null || gherkinStep === void 0 ? void 0 : gherkinStep.keyword) !== null && _g !== void 0 ? _g : '').trim();
        return {
            isFirstStep: (gherkinStep === null || gherkinStep === void 0 ? void 0 : gherkinStep.index) === 0,
            isLastStep: (gherkinStep === null || gherkinStep === void 0 ? void 0 : gherkinStep.isLastIndex) || false,
            keyword,
            status,
            errorMessage,
            text,
            feature: {
                keyword: (_j = (_h = gherkinDocument.feature) === null || _h === void 0 ? void 0 : _h.keyword) !== null && _j !== void 0 ? _j : 'Feature',
                name: (_l = (_k = gherkinDocument.feature) === null || _k === void 0 ? void 0 : _k.name) !== null && _l !== void 0 ? _l : '',
                description: (_o = (_m = gherkinDocument.feature) === null || _m === void 0 ? void 0 : _m.description) !== null && _o !== void 0 ? _o : undefined,
            },
            background: gherkinStep === null || gherkinStep === void 0 ? void 0 : gherkinStep.background,
            scenario: gherkinStep === null || gherkinStep === void 0 ? void 0 : gherkinStep.scenario,
        };
    }
    ReportBackgroundOrScenarioIfNeeded(gherkinStepInfo) {
        var _a, _b, _c, _d;
        if (!gherkinStepInfo.isFirstStep) {
            return;
        }
        const keyword = (((_a = gherkinStepInfo.background) === null || _a === void 0 ? void 0 : _a.keyword) || ((_b = gherkinStepInfo.scenario) === null || _b === void 0 ? void 0 : _b.keyword) ||
            'Scenario').trim();
        const name = ((_c = gherkinStepInfo.background) === null || _c === void 0 ? void 0 : _c.name) || ((_d = gherkinStepInfo.scenario) === null || _d === void 0 ? void 0 : _d.name) || '';
        const backgroundOrScenario = `${indent}${keyword}: ${name}`;
        this.log(this.colorFns.forStatus(cucumber_1.Status.PASSED)(backgroundOrScenario));
        this.log('\n');
    }
    ReportFeatureInfoIfNeeded(gherkinStepInfo) {
        if (this.hasDisplayedFeatureNameAndDescription) {
            return;
        }
        const { name, keyword, description } = gherkinStepInfo.feature;
        const feature = `${keyword}: ${name}`;
        this.log(this.colorFns.forStatus(cucumber_1.Status.PASSED)(feature));
        this.log('\n');
        this.log('\n');
        if (description) {
            const lines = description
                .split('\n')
                .map((line) => line.replace(/\\r/g, ''))
                .map((line) => `${indent}${line}`);
            this.log(this.colorFns.location(lines.join('\n')));
            this.log('\n');
            this.log('\n');
        }
        this.hasDisplayedFeatureNameAndDescription = true;
    }
    formatTestStepFinished(testRunInfo) {
        const stepInfo = this.getGherkinStepFrom(testRunInfo);
        if (!stepInfo) {
            return;
        }
        this.ReportFeatureInfoIfNeeded(stepInfo);
        this.ReportBackgroundOrScenarioIfNeeded(stepInfo);
        const { status, text, keyword, errorMessage } = stepInfo;
        const statusMarker = status_marker_1.toStatusMarker(status);
        const message = `${indent}${indent}${statusMarker} ${keyword} ${text}`;
        this.log(this.colorFns.forStatus(status)(message));
        this.log('\n');
        if (errorMessage) {
            this.log('\n');
            this.log(this.colorFns.forStatus(cucumber_1.Status.FAILED)(errorMessage));
            this.log('\n');
            this.log('\n');
        }
        if (stepInfo.isLastStep) {
            this.log('\n');
        }
        if (stepInfo.isLastStep && stepInfo.scenario) {
            this.hasDisplayedFeatureNameAndDescription = false;
        }
    }
    formatMeta(meta) {
        var _a, _b;
        const message = `${(_a = meta.implementation) === null || _a === void 0 ? void 0 : _a.name} version: ${(_b = meta.implementation) === null || _b === void 0 ? void 0 : _b.version}`;
        this.log(this.colorFns.forStatus(cucumber_1.Status.PASSED)(message));
        this.log('\n');
    }
    formatTestRunStarted(testRunInfo) {
        const startDate = time_1.toFormattedDate(testRunInfo.timestamp);
        const message = `Run started at ${startDate}`;
        this.log(this.colorFns.forStatus(cucumber_1.Status.PASSED)(message));
        this.log('\n');
        this.log('\n');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    formatTestCaseStarted(_testRunInfo) {
        const message = `=====================================================`;
        this.log(this.colorFns.location(message));
        this.log('\n');
        this.log('\n');
    }
    formatTestRunFinished(testRunInfo) {
        const startDate = time_1.toFormattedDate(testRunInfo.timestamp);
        const message = `Run finished at ${startDate}`;
        this.log(this.colorFns.forStatus(cucumber_1.Status.PASSED)(message));
        this.log('\n');
        this.log('\n');
    }
}
module.exports = SimpleConsoleFormatter;
